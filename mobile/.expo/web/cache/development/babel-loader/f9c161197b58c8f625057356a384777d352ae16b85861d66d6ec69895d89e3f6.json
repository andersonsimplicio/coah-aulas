{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { Archivo_400Regular, Archivo_700Bold, useFonts } from '@expo-google-fonts/archivo';\nimport { Poppins_400Regular, Poppins_600SemiBold } from '@expo-google-fonts/poppins';\nimport AppStack from \"./src/routes/AppStack\";\nimport { useCallback } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    appIsReady = _useState2[0],\n    setAppIsReady = _useState2[1];\n  var _useFonts = useFonts({\n      Archivo_400Regular: Archivo_400Regular,\n      Archivo_700Bold: Archivo_700Bold,\n      Poppins_400Regular: Poppins_400Regular,\n      Poppins_600SemiBold: Poppins_600SemiBold\n    }),\n    _useFonts2 = _slicedToArray(_useFonts, 1),\n    fontsLoaded = _useFonts2[0];\n  var onLayoutRootView = useCallback(_asyncToGenerator(function* () {\n    if (fontsLoaded) {\n      yield SplashScreen.hideAsync();\n    }\n  }), [fontsLoaded]);\n  if (!fontsLoaded) {\n    return null;\n  } else {\n    return _jsxs(_Fragment, {\n      children: [_jsx(AppStack, {}), _jsx(StatusBar, {\n        style: \"light\"\n      })]\n    });\n  }\n}","map":{"version":3,"names":["StatusBar","React","useState","SplashScreen","Archivo_400Regular","Archivo_700Bold","useFonts","Poppins_400Regular","Poppins_600SemiBold","AppStack","useCallback","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","appIsReady","setAppIsReady","_useFonts","_useFonts2","fontsLoaded","onLayoutRootView","_asyncToGenerator","hideAsync","children","style"],"sources":["/home/anderson/workspace/REACTPOS/mobile/App.tsx"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { Archivo_400Regular, Archivo_700Bold, useFonts } from '@expo-google-fonts/archivo';\nimport { Poppins_400Regular, Poppins_600SemiBold } from '@expo-google-fonts/poppins';\nimport AppStack from './src/routes/AppStack';\nimport { useCallback } from \"react\";\n\n\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n  let [fontsLoaded] = useFonts({\n    Archivo_400Regular,\n    Archivo_700Bold,\n    Poppins_400Regular, \n    Poppins_600SemiBold\n  });\n\n  const onLayoutRootView = useCallback(async () => {\n    if (fontsLoaded) {\n      // This tells the splash screen to hide immediately\n      await SplashScreen.hideAsync();\n    }\n  }, [fontsLoaded]);\n\n   \n   if (!fontsLoaded) {\n      return null;\n  } else {\n    return (\n      <>\n        <AppStack />\n        <StatusBar style=\"light\" />\n      </>\n    );\n  }\n}"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,KAAKC,YAAY,MAAM,oBAAoB;AAClD,SAASC,kBAAkB,EAAEC,eAAe,EAAEC,QAAQ,QAAQ,4BAA4B;AAC1F,SAASC,kBAAkB,EAAEC,mBAAmB,QAAQ,4BAA4B;AACpF,OAAOC,QAAQ;AACf,SAASC,WAAW,QAAQ,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAIpC,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,IAAAC,SAAA,GAAoChB,QAAQ,CAAC,KAAK,CAAC;IAAAiB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA5CG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAChC,IAAAI,SAAA,GAAoBjB,QAAQ,CAAC;MAC3BF,kBAAkB,EAAlBA,kBAAkB;MAClBC,eAAe,EAAfA,eAAe;MACfE,kBAAkB,EAAlBA,kBAAkB;MAClBC,mBAAmB,EAAnBA;IACF,CAAC,CAAC;IAAAgB,UAAA,GAAAJ,cAAA,CAAAG,SAAA;IALGE,WAAW,GAAAD,UAAA;EAOhB,IAAME,gBAAgB,GAAGhB,WAAW,CAAAiB,iBAAA,CAAC,aAAY;IAC/C,IAAIF,WAAW,EAAE;MAEf,MAAMtB,YAAY,CAACyB,SAAS,EAAE;IAChC;EACF,CAAC,GAAE,CAACH,WAAW,CAAC,CAAC;EAGhB,IAAI,CAACA,WAAW,EAAE;IACf,OAAO,IAAI;EACf,CAAC,MAAM;IACL,OACET,KAAA,CAAAF,SAAA;MAAAe,QAAA,GACEjB,IAAA,CAACH,QAAQ,KAAG,EACZG,IAAA,CAACZ,SAAS;QAAC8B,KAAK,EAAC;MAAO,EAAG;IAAA,EAC1B;EAEP;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}